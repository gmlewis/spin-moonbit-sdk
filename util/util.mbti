package "gmlewis/spin-moonbit-sdk/util"

import(
  "gmlewis/spin-moonbit-sdk/common"
  "gmlewis/spin-moonbit-sdk/interface/wasi/http/types"
  "gmlewis/spin-moonbit-sdk/interface/wasi/io/streams"
)

// Values
fn consume(@types.OutgoingRequest, &@common.HashFunc?, debug~ : Bool = ..) -> Result[(Int64, String), @types.ErrorCode]

fn consume_func(@types.OutgoingRequest, ByteFunc?, debug~ : Bool = ..) -> Result[Int64, @types.ErrorCode]

fn dump_headers(@types.Fields) -> Unit

fn get_body_bytes(@types.IncomingRequest) -> Result[Bytes, @streams.StreamError]

fn get_content_length(@types.Fields) -> Int

fn make_404_response() -> @types.OutgoingResponse

fn make_500_response() -> @types.OutgoingResponse

fn make_response(Bytes, content_type~ : Bytes = .., status_code~ : UInt = ..) -> @types.OutgoingResponse

fn make_response_str(String, content_type~ : Bytes = .., status_code~ : UInt = ..) -> @types.OutgoingResponse

fn new_request(@types.Method, String, fields~ : Array[(String, Bytes)] = ..) -> @types.OutgoingRequest

fn println(String) -> Unit

fn random_int(Int) -> Int

fn respond_404(@types.ResponseOutparam) -> Unit

fn respond_500(@types.ResponseOutparam) -> Unit

fn respond_bytes(@types.ResponseOutparam, Bytes, content_type~ : Bytes = .., status_code~ : UInt = ..) -> Unit

fn respond_str(@types.ResponseOutparam, String, content_type~ : Bytes = .., status_code~ : UInt = ..) -> Unit

fn send_request(@types.OutgoingRequest, debug~ : Bool = ..) -> Result[Bytes, @types.ErrorCode]

fn split_path(@types.IncomingRequest) -> (@types.Method, Array[String])

fn stream(@types.OutgoingRequest, @types.ResponseOutparam, &@common.HashFunc?, debug~ : Bool = ..) -> Result[(Int64, String), @types.ErrorCode]

fn stream_func(@types.OutgoingRequest, @types.ResponseOutparam, ByteFunc?, debug~ : Bool = ..) -> Result[Int64, @types.ErrorCode]

// Types and methods
type ByteFunc

// Type aliases

// Traits

