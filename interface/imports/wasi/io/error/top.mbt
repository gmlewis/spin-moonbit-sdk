// Generated by `wit-bindgen` 0.29.0. DO NOT EDIT!
/// A resource which represents some error information.
///
/// The only method provided by this resource is `to-debug-string`,
/// which provides some human-readable information about the error.
///
/// In the `wasi:io` package, this resource is returned through the
/// `wasi:io/streams/stream-error` type.
///
/// To provide more specific error information, other interfaces may
/// provide functions to further "downcast" this error into more specific
/// error information. For example, `error`s returned in streams derived
/// from filesystem types to be described using the filesystem's own
/// error-code type, using the function
/// `wasi:filesystem/types/filesystem-error-code`, which takes a parameter
/// `borrow<error>` and returns
/// `option<wasi:filesystem/types/error-code>`.
///
/// The set of functions which can "downcast" an `error` into a more
/// concrete type is open.
pub type Error_ Int derive(Show, Eq)

fn wasmImportResourceDropError_(resource : Int) = "wasi:io/error@0.2.0" "[resource-drop]error"

pub fn Error_::drop(self : Error_) -> Unit {
      wasmImportResourceDropError_(self.0)
}
/// Returns a string that is suitable to assist humans in debugging
/// this error.
///
/// WARNING: The returned string should not be consumed mechanically!
/// It may change across platforms, hosts, or other implementation
/// details. Parsing this string is a major platform-compatibility
/// hazard.
pub fn Error_::to_debug_string(self : Error_) -> String {

      let return_area = @ffi.malloc(8)
      wasmImportMethodErrorToDebugString(self.0, return_area);

      let result = @ffi.ptr2str(@ffi.load32((return_area) + 0))
      @ffi.free(return_area)
      return result

}

