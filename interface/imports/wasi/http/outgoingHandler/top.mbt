// Generated by `wit-bindgen` 0.29.0. DO NOT EDIT!
/// This function is invoked with an outgoing HTTP Request, and it returns
/// a resource `future-incoming-response` which represents an HTTP Response
/// which may arrive in the future.
///
/// The `options` argument accepts optional parameters for the HTTP
/// protocol's transport layer.
///
/// This function may return an error if the `outgoing-request` is invalid
/// or not allowed to be made. Otherwise, protocol errors are reported
/// through the `future-incoming-response`.
pub fn handle(request : @types.OutgoingRequest, options : @types.RequestOptions?) -> Result[@types.FutureIncomingResponse, @types.ErrorCode] {

      let (lowered, lowered3) = match ((options)) {
            None => {

                  ((0), 0)
            }
            Some(payload2) => {

                  ((1), payload2.0)
            }
      }
      let return_area = @ffi.malloc(40)
      wasmImportHandle(request.0, lowered, lowered3, return_area);

      let lifted204 = match (@ffi.load8_u((return_area) + 0)) {
            0 => {

                  Result::Ok(@types.FutureIncomingResponse::FutureIncomingResponse(@ffi.load32((return_area) + 8)))
            }
            1 => {

                  let lifted203 = match (@ffi.load8_u((return_area) + 8)) {
                        0 => {

                              @types.ErrorCode::DnsTimeout
                        }
                        1 => {

                              let lifted : String? = match @ffi.load8_u((return_area) + 16) {
                                    0 => Option::None
                                    1 => {

                                          let result = @ffi.ptr2str(@ffi.load32((return_area) + 20))

                                          Option::Some(result)
                                    }
                                    _ => panic()
                              }

                              let lifted20 : UInt? = match @ffi.load8_u((return_area) + 28) {
                                    0 => Option::None
                                    1 => {

                                          Option::Some((@ffi.load16_u((return_area) + 30).land(0xFFFF).to_uint()))
                                    }
                                    _ => panic()
                              }

                              @types.ErrorCode::DnsError(@types.DnsErrorPayload::{rcode : lifted, info_code : lifted20})
                        }
                        2 => {

                              @types.ErrorCode::DestinationNotFound
                        }
                        3 => {

                              @types.ErrorCode::DestinationUnavailable
                        }
                        4 => {

                              @types.ErrorCode::DestinationIpProhibited
                        }
                        5 => {

                              @types.ErrorCode::DestinationIpUnroutable
                        }
                        6 => {

                              @types.ErrorCode::ConnectionRefused
                        }
                        7 => {

                              @types.ErrorCode::ConnectionTerminated
                        }
                        8 => {

                              @types.ErrorCode::ConnectionTimeout
                        }
                        9 => {

                              @types.ErrorCode::ConnectionReadTimeout
                        }
                        10 => {

                              @types.ErrorCode::ConnectionWriteTimeout
                        }
                        11 => {

                              @types.ErrorCode::ConnectionLimitReached
                        }
                        12 => {

                              @types.ErrorCode::TlsProtocolError
                        }
                        13 => {

                              @types.ErrorCode::TlsCertificateError
                        }
                        14 => {

                              let lifted51 : Byte? = match @ffi.load8_u((return_area) + 16) {
                                    0 => Option::None
                                    1 => {

                                          Option::Some((@ffi.load8_u((return_area) + 17)).to_byte())
                                    }
                                    _ => panic()
                              }

                              let lifted57 : String? = match @ffi.load8_u((return_area) + 20) {
                                    0 => Option::None
                                    1 => {

                                          let result56 = @ffi.ptr2str(@ffi.load32((return_area) + 24))

                                          Option::Some(result56)
                                    }
                                    _ => panic()
                              }

                              @types.ErrorCode::TlsAlertReceived(@types.TlsAlertReceivedPayload::{alert_id : lifted51, alert_message : lifted57})
                        }
                        15 => {

                              @types.ErrorCode::HttpRequestDenied
                        }
                        16 => {

                              @types.ErrorCode::HttpRequestLengthRequired
                        }
                        17 => {

                              let lifted68 : UInt64? = match @ffi.load8_u((return_area) + 16) {
                                    0 => Option::None
                                    1 => {

                                          Option::Some((@ffi.load64((return_area) + 24)).to_uint64())
                                    }
                                    _ => panic()
                              }

                              @types.ErrorCode::HttpRequestBodySize(lifted68)
                        }
                        18 => {

                              @types.ErrorCode::HttpRequestMethodInvalid
                        }
                        19 => {

                              @types.ErrorCode::HttpRequestUriInvalid
                        }
                        20 => {

                              @types.ErrorCode::HttpRequestUriTooLong
                        }
                        21 => {

                              let lifted81 : UInt? = match @ffi.load8_u((return_area) + 16) {
                                    0 => Option::None
                                    1 => {

                                          Option::Some((@ffi.load32((return_area) + 20)).to_uint())
                                    }
                                    _ => panic()
                              }

                              @types.ErrorCode::HttpRequestHeaderSectionSize(lifted81)
                        }
                        22 => {

                              let lifted99 : @types.FieldSizePayload? = match @ffi.load8_u((return_area) + 16) {
                                    0 => Option::None
                                    1 => {

                                          let lifted93 : String? = match @ffi.load8_u((return_area) + 20) {
                                                0 => Option::None
                                                1 => {

                                                      let result92 = @ffi.ptr2str(@ffi.load32((return_area) + 24))

                                                      Option::Some(result92)
                                                }
                                                _ => panic()
                                          }

                                          let lifted98 : UInt? = match @ffi.load8_u((return_area) + 32) {
                                                0 => Option::None
                                                1 => {

                                                      Option::Some((@ffi.load32((return_area) + 36)).to_uint())
                                                }
                                                _ => panic()
                                          }

                                          Option::Some(@types.FieldSizePayload::{field_name : lifted93, field_size : lifted98})
                                    }
                                    _ => panic()
                              }

                              @types.ErrorCode::HttpRequestHeaderSize(lifted99)
                        }
                        23 => {

                              let lifted106 : UInt? = match @ffi.load8_u((return_area) + 16) {
                                    0 => Option::None
                                    1 => {

                                          Option::Some((@ffi.load32((return_area) + 20)).to_uint())
                                    }
                                    _ => panic()
                              }

                              @types.ErrorCode::HttpRequestTrailerSectionSize(lifted106)
                        }
                        24 => {

                              let lifted114 : String? = match @ffi.load8_u((return_area) + 16) {
                                    0 => Option::None
                                    1 => {

                                          let result113 = @ffi.ptr2str(@ffi.load32((return_area) + 20))

                                          Option::Some(result113)
                                    }
                                    _ => panic()
                              }

                              let lifted119 : UInt? = match @ffi.load8_u((return_area) + 28) {
                                    0 => Option::None
                                    1 => {

                                          Option::Some((@ffi.load32((return_area) + 32)).to_uint())
                                    }
                                    _ => panic()
                              }

                              @types.ErrorCode::HttpRequestTrailerSize(@types.FieldSizePayload::{field_name : lifted114, field_size : lifted119})
                        }
                        25 => {

                              @types.ErrorCode::HttpResponseIncomplete
                        }
                        26 => {

                              let lifted128 : UInt? = match @ffi.load8_u((return_area) + 16) {
                                    0 => Option::None
                                    1 => {

                                          Option::Some((@ffi.load32((return_area) + 20)).to_uint())
                                    }
                                    _ => panic()
                              }

                              @types.ErrorCode::HttpResponseHeaderSectionSize(lifted128)
                        }
                        27 => {

                              let lifted136 : String? = match @ffi.load8_u((return_area) + 16) {
                                    0 => Option::None
                                    1 => {

                                          let result135 = @ffi.ptr2str(@ffi.load32((return_area) + 20))

                                          Option::Some(result135)
                                    }
                                    _ => panic()
                              }

                              let lifted141 : UInt? = match @ffi.load8_u((return_area) + 28) {
                                    0 => Option::None
                                    1 => {

                                          Option::Some((@ffi.load32((return_area) + 32)).to_uint())
                                    }
                                    _ => panic()
                              }

                              @types.ErrorCode::HttpResponseHeaderSize(@types.FieldSizePayload::{field_name : lifted136, field_size : lifted141})
                        }
                        28 => {

                              let lifted148 : UInt64? = match @ffi.load8_u((return_area) + 16) {
                                    0 => Option::None
                                    1 => {

                                          Option::Some((@ffi.load64((return_area) + 24)).to_uint64())
                                    }
                                    _ => panic()
                              }

                              @types.ErrorCode::HttpResponseBodySize(lifted148)
                        }
                        29 => {

                              let lifted155 : UInt? = match @ffi.load8_u((return_area) + 16) {
                                    0 => Option::None
                                    1 => {

                                          Option::Some((@ffi.load32((return_area) + 20)).to_uint())
                                    }
                                    _ => panic()
                              }

                              @types.ErrorCode::HttpResponseTrailerSectionSize(lifted155)
                        }
                        30 => {

                              let lifted163 : String? = match @ffi.load8_u((return_area) + 16) {
                                    0 => Option::None
                                    1 => {

                                          let result162 = @ffi.ptr2str(@ffi.load32((return_area) + 20))

                                          Option::Some(result162)
                                    }
                                    _ => panic()
                              }

                              let lifted168 : UInt? = match @ffi.load8_u((return_area) + 28) {
                                    0 => Option::None
                                    1 => {

                                          Option::Some((@ffi.load32((return_area) + 32)).to_uint())
                                    }
                                    _ => panic()
                              }

                              @types.ErrorCode::HttpResponseTrailerSize(@types.FieldSizePayload::{field_name : lifted163, field_size : lifted168})
                        }
                        31 => {

                              let lifted176 : String? = match @ffi.load8_u((return_area) + 16) {
                                    0 => Option::None
                                    1 => {

                                          let result175 = @ffi.ptr2str(@ffi.load32((return_area) + 20))

                                          Option::Some(result175)
                                    }
                                    _ => panic()
                              }

                              @types.ErrorCode::HttpResponseTransferCoding(lifted176)
                        }
                        32 => {

                              let lifted184 : String? = match @ffi.load8_u((return_area) + 16) {
                                    0 => Option::None
                                    1 => {

                                          let result183 = @ffi.ptr2str(@ffi.load32((return_area) + 20))

                                          Option::Some(result183)
                                    }
                                    _ => panic()
                              }

                              @types.ErrorCode::HttpResponseContentCoding(lifted184)
                        }
                        33 => {

                              @types.ErrorCode::HttpResponseTimeout
                        }
                        34 => {

                              @types.ErrorCode::HttpUpgradeFailed
                        }
                        35 => {

                              @types.ErrorCode::HttpProtocolError
                        }
                        36 => {

                              @types.ErrorCode::LoopDetected
                        }
                        37 => {

                              @types.ErrorCode::ConfigurationError
                        }
                        38 => {

                              let lifted202 : String? = match @ffi.load8_u((return_area) + 16) {
                                    0 => Option::None
                                    1 => {

                                          let result201 = @ffi.ptr2str(@ffi.load32((return_area) + 20))

                                          Option::Some(result201)
                                    }
                                    _ => panic()
                              }

                              @types.ErrorCode::InternalError(lifted202)
                        }
                        _ => panic()
                  }

                  Result::Err(lifted203)
            }
            _ => panic()
      }
      @ffi.free(return_area)
      return lifted204

}

