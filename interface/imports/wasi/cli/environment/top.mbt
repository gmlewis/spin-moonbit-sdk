// Generated by `wit-bindgen` 0.29.0. DO NOT EDIT!
/// Get the POSIX-style environment variables.
///
/// Each environment variable is provided as a pair of string variable names
/// and string value.
///
/// Morally, these are a value import, but until value imports are available
/// in the component model, this import function should return the same
/// values each time it is called.
pub fn get_environment() -> Array[(String, String)] {

      let return_area = @ffi.malloc(8)
      wasmImportGetEnvironment(return_area);

      let array : Array[(String, String)] = [];
      for index = 0; index < (@ffi.load32((return_area) + 4)); index = index + 1 {
            let base = (@ffi.load32((return_area) + 0)) + (index * 16)

            let result = @ffi.ptr2str(@ffi.load32((base) + 0))

            let result0 = @ffi.ptr2str(@ffi.load32((base) + 8))

            array.push((result, result0))
      }
      @ffi.free(@ffi.load32((return_area) + 0))
      @ffi.free(return_area)
      return array

}
/// Get the POSIX-style arguments to the program.
pub fn get_arguments() -> Array[String] {

      let return_area = @ffi.malloc(8)
      wasmImportGetArguments(return_area);

      let array : Array[String] = [];
      for index = 0; index < (@ffi.load32((return_area) + 4)); index = index + 1 {
            let base = (@ffi.load32((return_area) + 0)) + (index * 8)

            let result = @ffi.ptr2str(@ffi.load32((base) + 0))

            array.push(result)
      }
      @ffi.free(@ffi.load32((return_area) + 0))
      @ffi.free(return_area)
      return array

}
/// Return a path that programs should use as their initial current working
/// directory, interpreting `.` as shorthand for this.
pub fn initial_cwd() -> String? {

      let return_area = @ffi.malloc(12)
      wasmImportInitialCwd(return_area);

      let lifted : String? = match @ffi.load8_u((return_area) + 0) {
            0 => Option::None
            1 => {

                  let result = @ffi.ptr2str(@ffi.load32((return_area) + 4))

                  Option::Some(result)
            }
            _ => panic()
      }
      @ffi.free(return_area)
      return lifted

}

