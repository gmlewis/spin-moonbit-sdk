// Generated by `wit-bindgen` 0.29.0. DO NOT EDIT!
/// A time and date in seconds plus nanoseconds.
pub struct Datetime {
      seconds : UInt64; nanoseconds : UInt
} derive(Show, Eq)
/// Read the current value of the clock.
///
/// This clock is not monotonic, therefore calling this function repeatedly
/// will not necessarily produce a sequence of non-decreasing values.
///
/// The returned timestamps represent the number of seconds since
/// 1970-01-01T00:00:00Z, also known as [POSIX's Seconds Since the Epoch],
/// also known as [Unix Time].
///
/// The nanoseconds field of the output is always less than 1000000000.
///
/// [POSIX's Seconds Since the Epoch]: https://pubs.opengroup.org/onlinepubs/9699919799/xrat/V4_xbd_chap04.html#tag_21_04_16
/// [Unix Time]: https://en.wikipedia.org/wiki/Unix_time
pub fn now() -> Datetime {

      let return_area = @ffi.malloc(16)
      wasmImportNow(return_area);
      @ffi.free(return_area)
      return Datetime::{seconds : (@ffi.load64((return_area) + 0)).to_uint64(), nanoseconds : (@ffi.load32((return_area) + 8)).to_uint()}

}
/// Query the resolution of the clock.
///
/// The nanoseconds field of the output is always less than 1000000000.
pub fn resolution() -> Datetime {

      let return_area = @ffi.malloc(16)
      wasmImportResolution(return_area);
      @ffi.free(return_area)
      return Datetime::{seconds : (@ffi.load64((return_area) + 0)).to_uint64(), nanoseconds : (@ffi.load32((return_area) + 8)).to_uint()}

}

