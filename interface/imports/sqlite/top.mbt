// Generated by `wit-bindgen` 0.29.0. DO NOT EDIT!
/// A handle to an open sqlite instance
pub type Connection Int derive(Show, Eq)

fn wasmImportResourceDropConnection(resource : Int) = "gmlewis:spin-moonbit-pdk/sqlite" "[resource-drop]connection"

pub fn Connection::drop(self : Connection) -> Unit {
  wasmImportResourceDropConnection(self.0)
}

/// The set of errors which may be raised by functions in this interface
pub enum Error_ {
  NoSuchDatabase
  AccessDenied
  InvalidConnection
  DatabaseFull
  Io(String)
} derive(Show, Eq)

/// A single column's result from a database query
pub enum Value {
  Integer(Int64)
  Real(Double)
  Text(String)
  Blob(Bytes)
  Null
} derive(Show, Eq)

/// A set of values for each of the columns in a query-result
pub struct RowResult {
  values : Array[Value]
} derive(Show, Eq)

/// A result of a query
pub struct QueryResult {
  columns : Array[String]
  rows : Array[RowResult]
} derive(Show, Eq)

/// Open a connection to a named database instance.
///
/// If `database` is "default", the default instance is opened.
///
/// `error::no-such-database` will be raised if the `name` is not recognized.
pub fn Connection::open(database : String) -> Result[Connection, Error_] {
  let return_area = @ffi.malloc(16)
  wasmImportStaticConnectionOpen(
    @ffi.str2ptr(database),
    database.iter().count(),
    return_area,
  )
  let lifted12 = match @ffi.load8_u(return_area + 0) {
    0 => Result::Ok(Connection::Connection(@ffi.load32(return_area + 4)))
    1 => {
      let lifted = match @ffi.load8_u(return_area + 4) {
        0 => Error_::NoSuchDatabase
        1 => Error_::AccessDenied
        2 => Error_::InvalidConnection
        3 => Error_::DatabaseFull
        4 => {
          let result = @ffi.ptr2str(@ffi.load32(return_area + 8))
          Error_::Io(result)
        }
        _ => panic()
      }
      Result::Err(lifted)
    }
    _ => panic()
  }
  ignore(database)
  @ffi.free(return_area)
  return lifted12
}

/// Execute a statement returning back data if there is any
pub fn Connection::execute(
  self : Connection,
  statement : String,
  parameters : Array[Value]
) -> Result[QueryResult, Error_] {
  let cleanupList : Array[@ffi.Cleanup] = []
  let ignoreList : Array[@ffi.Any] = []
  let address = @ffi.malloc(parameters.length() * 16)
  for index = 0; index < parameters.length(); index = index + 1 {
    let element : Value = parameters[index]
    let base = address + index * 16
    match element {
      Integer(payload) => {
        @ffi.store8(base + 0, 0)
        @ffi.store64(base + 8, payload)
        ()
      }
      Real(payload4) => {
        @ffi.store8(base + 0, 1)
        @ffi.storef64(base + 8, payload4)
        ()
      }
      Text(payload7) => {
        @ffi.store8(base + 0, 2)
        @ffi.store32(base + 12, payload7.iter().count())
        @ffi.store32(base + 8, @ffi.str2ptr(payload7))
        ignoreList.push(payload7)
        ()
      }
      Blob(payload10) => {
        @ffi.store8(base + 0, 3)
        @ffi.store32(base + 12, payload10.length())
        @ffi.store32(base + 8, @ffi.bytes2ptr(payload10))
        ignoreList.push(payload10)
        ()
      }
      Null => {
        @ffi.store8(base + 0, 4)
        ()
      }
      _ => panic()
    }
  }
  let return_area = @ffi.malloc(20)
  wasmImportMethodConnectionExecute(
    self.0,
    @ffi.str2ptr(statement),
    statement.iter().count(),
    address,
    parameters.length(),
    return_area,
  )
  let lifted53 = match @ffi.load8_u(return_area + 0) {
    0 => {
      let array : Array[String] = []
      for index18 = 0
          index18 < @ffi.load32(return_area + 8)
          index18 = index18 + 1 {
        let base17 = @ffi.load32(return_area + 4) + index18 * 8
        let result = @ffi.ptr2str(@ffi.load32(base17 + 0))
        array.push(result)
      }
      @ffi.free(@ffi.load32(return_area + 4))
      let array37 : Array[RowResult] = []
      for index38 = 0
          index38 < @ffi.load32(return_area + 16)
          index38 = index38 + 1 {
        let base20 = @ffi.load32(return_area + 12) + index38 * 8
        let array35 : Array[Value] = []
        for index36 = 0
            index36 < @ffi.load32(base20 + 4)
            index36 = index36 + 1 {
          let base22 = @ffi.load32(base20 + 0) + index36 * 16
          let lifted = match @ffi.load8_u(base22 + 0) {
            0 => Value::Integer(@ffi.load64(base22 + 8))
            1 => Value::Real(@ffi.loadf64(base22 + 8))
            2 => {
              let result29 = @ffi.ptr2str(@ffi.load32(base22 + 8))
              Value::Text(result29)
            }
            3 => {
              let result32 = @ffi.ptr2bytes(@ffi.load32(base22 + 8))
              Value::Blob(result32)
            }
            4 => Value::Null
            _ => panic()
          }
          array35.push(lifted)
        }
        @ffi.free(@ffi.load32(base20 + 0))
        array37.push(RowResult::{ values: array35 })
      }
      @ffi.free(@ffi.load32(return_area + 12))
      Result::Ok(QueryResult::{ columns: array, rows: array37 })
    }
    1 => {
      let lifted52 = match @ffi.load8_u(return_area + 4) {
        0 => Error_::NoSuchDatabase
        1 => Error_::AccessDenied
        2 => Error_::InvalidConnection
        3 => Error_::DatabaseFull
        4 => {
          let result51 = @ffi.ptr2str(@ffi.load32(return_area + 8))
          Error_::Io(result51)
        }
        _ => panic()
      }
      Result::Err(lifted52)
    }
    _ => panic()
  }
  ignore(statement)
  @ffi.free(address)
  @ffi.free(return_area)
  cleanupList.each(fn(cleanup) { @ffi.free(cleanup.address) })
  ignore(ignoreList)
  return lifted53
}
