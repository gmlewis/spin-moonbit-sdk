// Generated by `wit-bindgen` 0.41.0. DO NOT EDIT!
///| Return `len` cryptographically-secure random or pseudo-random bytes.
///
/// This function must produce data at least as cryptographically secure and
/// fast as an adequately seeded cryptographically-secure pseudo-random
/// number generator (CSPRNG). It must not block, from the perspective of
/// the calling program, under any circumstances, including on the first
/// request and on requests for numbers of bytes. The returned data must
/// always be unpredictable.
///
/// This function must always return fresh data. Deterministic environments
/// must omit this function, rather than implementing it with deterministic
/// data.
pub fn get_random_bytes(len : UInt64) -> FixedArray[Byte] {
  let return_area = @ffi.malloc(8)
  wasmImportGetRandomBytes(len.reinterpret_as_int64(), return_area)
  let result = @ffi.ptr2bytes(
    @ffi.load32(return_area + 0),
    @ffi.load32(return_area + 4),
  )
  @ffi.free(return_area)
  return result
}

///| Return a cryptographically-secure random or pseudo-random `u64` value.
///
/// This function returns the same type of data as `get-random-bytes`,
/// represented as a `u64`.
pub fn get_random_u64() -> UInt64 {
  let result : Int64 = wasmImportGetRandomU64()
  return result.reinterpret_as_uint64()
}
