// Generated by `wit-bindgen` 0.41.0. DO NOT EDIT!

///|
fn wasmImportResourceDropFields(resource : Int) = "wasi:http/types@0.2.0" "[resource-drop]fields"

///|
fn wasmImportResourceDropIncomingRequest(resource : Int) = "wasi:http/types@0.2.0" "[resource-drop]incoming-request"

///|
fn wasmImportResourceDropOutgoingRequest(resource : Int) = "wasi:http/types@0.2.0" "[resource-drop]outgoing-request"

///|
fn wasmImportResourceDropRequestOptions(resource : Int) = "wasi:http/types@0.2.0" "[resource-drop]request-options"

///|
fn wasmImportResourceDropResponseOutparam(resource : Int) = "wasi:http/types@0.2.0" "[resource-drop]response-outparam"

///|
fn wasmImportResourceDropIncomingResponse(resource : Int) = "wasi:http/types@0.2.0" "[resource-drop]incoming-response"

///|
fn wasmImportResourceDropIncomingBody(resource : Int) = "wasi:http/types@0.2.0" "[resource-drop]incoming-body"

///|
fn wasmImportResourceDropFutureTrailers(resource : Int) = "wasi:http/types@0.2.0" "[resource-drop]future-trailers"

///|
fn wasmImportResourceDropOutgoingResponse(resource : Int) = "wasi:http/types@0.2.0" "[resource-drop]outgoing-response"

///|
fn wasmImportResourceDropOutgoingBody(resource : Int) = "wasi:http/types@0.2.0" "[resource-drop]outgoing-body"

///|
fn wasmImportResourceDropFutureIncomingResponse(resource : Int) = "wasi:http/types@0.2.0" "[resource-drop]future-incoming-response"

///|
fn wasmImportHttpErrorCode(p0 : Int, p1 : Int) = "wasi:http/types@0.2.0" "http-error-code"

///|
fn wasmImportConstructorFields() -> Int = "wasi:http/types@0.2.0" "[constructor]fields"

///|
fn wasmImportStaticFieldsFromList(p0 : Int, p1 : Int, p2 : Int) = "wasi:http/types@0.2.0" "[static]fields.from-list"

///|
fn wasmImportMethodFieldsGet(p0 : Int, p1 : Int, p2 : Int, p3 : Int) = "wasi:http/types@0.2.0" "[method]fields.get"

///|
fn wasmImportMethodFieldsHas(p0 : Int, p1 : Int, p2 : Int) -> Int = "wasi:http/types@0.2.0" "[method]fields.has"

///|
fn wasmImportMethodFieldsSet(
  p0 : Int,
  p1 : Int,
  p2 : Int,
  p3 : Int,
  p4 : Int,
  p5 : Int
) = "wasi:http/types@0.2.0" "[method]fields.set"

///|
fn wasmImportMethodFieldsDelete(p0 : Int, p1 : Int, p2 : Int, p3 : Int) = "wasi:http/types@0.2.0" "[method]fields.delete"

///|
fn wasmImportMethodFieldsAppend(
  p0 : Int,
  p1 : Int,
  p2 : Int,
  p3 : Int,
  p4 : Int,
  p5 : Int
) = "wasi:http/types@0.2.0" "[method]fields.append"

///|
fn wasmImportMethodFieldsEntries(p0 : Int, p1 : Int) = "wasi:http/types@0.2.0" "[method]fields.entries"

///|
fn wasmImportMethodFieldsClone(p0 : Int) -> Int = "wasi:http/types@0.2.0" "[method]fields.clone"

///|
fn wasmImportMethodIncomingRequestMethod(p0 : Int, p1 : Int) = "wasi:http/types@0.2.0" "[method]incoming-request.method"

///|
fn wasmImportMethodIncomingRequestPathWithQuery(p0 : Int, p1 : Int) = "wasi:http/types@0.2.0" "[method]incoming-request.path-with-query"

///|
fn wasmImportMethodIncomingRequestScheme(p0 : Int, p1 : Int) = "wasi:http/types@0.2.0" "[method]incoming-request.scheme"

///|
fn wasmImportMethodIncomingRequestAuthority(p0 : Int, p1 : Int) = "wasi:http/types@0.2.0" "[method]incoming-request.authority"

///|
fn wasmImportMethodIncomingRequestHeaders(p0 : Int) -> Int = "wasi:http/types@0.2.0" "[method]incoming-request.headers"

///|
fn wasmImportMethodIncomingRequestConsume(p0 : Int, p1 : Int) = "wasi:http/types@0.2.0" "[method]incoming-request.consume"

///|
fn wasmImportConstructorOutgoingRequest(p0 : Int) -> Int = "wasi:http/types@0.2.0" "[constructor]outgoing-request"

///|
fn wasmImportMethodOutgoingRequestBody(p0 : Int, p1 : Int) = "wasi:http/types@0.2.0" "[method]outgoing-request.body"

///|
fn wasmImportMethodOutgoingRequestMethod(p0 : Int, p1 : Int) = "wasi:http/types@0.2.0" "[method]outgoing-request.method"

///|
fn wasmImportMethodOutgoingRequestSetMethod(
  p0 : Int,
  p1 : Int,
  p2 : Int,
  p3 : Int
) -> Int = "wasi:http/types@0.2.0" "[method]outgoing-request.set-method"

///|
fn wasmImportMethodOutgoingRequestPathWithQuery(p0 : Int, p1 : Int) = "wasi:http/types@0.2.0" "[method]outgoing-request.path-with-query"

///|
fn wasmImportMethodOutgoingRequestSetPathWithQuery(
  p0 : Int,
  p1 : Int,
  p2 : Int,
  p3 : Int
) -> Int = "wasi:http/types@0.2.0" "[method]outgoing-request.set-path-with-query"

///|
fn wasmImportMethodOutgoingRequestScheme(p0 : Int, p1 : Int) = "wasi:http/types@0.2.0" "[method]outgoing-request.scheme"

///|
fn wasmImportMethodOutgoingRequestSetScheme(
  p0 : Int,
  p1 : Int,
  p2 : Int,
  p3 : Int,
  p4 : Int
) -> Int = "wasi:http/types@0.2.0" "[method]outgoing-request.set-scheme"

///|
fn wasmImportMethodOutgoingRequestAuthority(p0 : Int, p1 : Int) = "wasi:http/types@0.2.0" "[method]outgoing-request.authority"

///|
fn wasmImportMethodOutgoingRequestSetAuthority(
  p0 : Int,
  p1 : Int,
  p2 : Int,
  p3 : Int
) -> Int = "wasi:http/types@0.2.0" "[method]outgoing-request.set-authority"

///|
fn wasmImportMethodOutgoingRequestHeaders(p0 : Int) -> Int = "wasi:http/types@0.2.0" "[method]outgoing-request.headers"

///|
fn wasmImportConstructorRequestOptions() -> Int = "wasi:http/types@0.2.0" "[constructor]request-options"

///|
fn wasmImportMethodRequestOptionsConnectTimeout(p0 : Int, p1 : Int) = "wasi:http/types@0.2.0" "[method]request-options.connect-timeout"

///|
fn wasmImportMethodRequestOptionsSetConnectTimeout(
  p0 : Int,
  p1 : Int,
  p2 : Int64
) -> Int = "wasi:http/types@0.2.0" "[method]request-options.set-connect-timeout"

///|
fn wasmImportMethodRequestOptionsFirstByteTimeout(p0 : Int, p1 : Int) = "wasi:http/types@0.2.0" "[method]request-options.first-byte-timeout"

///|
fn wasmImportMethodRequestOptionsSetFirstByteTimeout(
  p0 : Int,
  p1 : Int,
  p2 : Int64
) -> Int = "wasi:http/types@0.2.0" "[method]request-options.set-first-byte-timeout"

///|
fn wasmImportMethodRequestOptionsBetweenBytesTimeout(p0 : Int, p1 : Int) = "wasi:http/types@0.2.0" "[method]request-options.between-bytes-timeout"

///|
fn wasmImportMethodRequestOptionsSetBetweenBytesTimeout(
  p0 : Int,
  p1 : Int,
  p2 : Int64
) -> Int = "wasi:http/types@0.2.0" "[method]request-options.set-between-bytes-timeout"

///|
fn wasmImportStaticResponseOutparamSet(
  p0 : Int,
  p1 : Int,
  p2 : Int,
  p3 : Int,
  p4 : Int64,
  p5 : Int,
  p6 : Int,
  p7 : Int,
  p8 : Int
) = "wasi:http/types@0.2.0" "[static]response-outparam.set"

///|
fn wasmImportMethodIncomingResponseStatus(p0 : Int) -> Int = "wasi:http/types@0.2.0" "[method]incoming-response.status"

///|
fn wasmImportMethodIncomingResponseHeaders(p0 : Int) -> Int = "wasi:http/types@0.2.0" "[method]incoming-response.headers"

///|
fn wasmImportMethodIncomingResponseConsume(p0 : Int, p1 : Int) = "wasi:http/types@0.2.0" "[method]incoming-response.consume"

///|
fn wasmImportMethodIncomingBodyStream(p0 : Int, p1 : Int) = "wasi:http/types@0.2.0" "[method]incoming-body.stream"

///|
fn wasmImportStaticIncomingBodyFinish(p0 : Int) -> Int = "wasi:http/types@0.2.0" "[static]incoming-body.finish"

///|
fn wasmImportMethodFutureTrailersSubscribe(p0 : Int) -> Int = "wasi:http/types@0.2.0" "[method]future-trailers.subscribe"

///|
fn wasmImportMethodFutureTrailersGet(p0 : Int, p1 : Int) = "wasi:http/types@0.2.0" "[method]future-trailers.get"

///|
fn wasmImportConstructorOutgoingResponse(p0 : Int) -> Int = "wasi:http/types@0.2.0" "[constructor]outgoing-response"

///|
fn wasmImportMethodOutgoingResponseStatusCode(p0 : Int) -> Int = "wasi:http/types@0.2.0" "[method]outgoing-response.status-code"

///|
fn wasmImportMethodOutgoingResponseSetStatusCode(p0 : Int, p1 : Int) -> Int = "wasi:http/types@0.2.0" "[method]outgoing-response.set-status-code"

///|
fn wasmImportMethodOutgoingResponseHeaders(p0 : Int) -> Int = "wasi:http/types@0.2.0" "[method]outgoing-response.headers"

///|
fn wasmImportMethodOutgoingResponseBody(p0 : Int, p1 : Int) = "wasi:http/types@0.2.0" "[method]outgoing-response.body"

///|
fn wasmImportMethodOutgoingBodyWrite(p0 : Int, p1 : Int) = "wasi:http/types@0.2.0" "[method]outgoing-body.write"

///|
fn wasmImportStaticOutgoingBodyFinish(p0 : Int, p1 : Int, p2 : Int, p3 : Int) = "wasi:http/types@0.2.0" "[static]outgoing-body.finish"

///|
fn wasmImportMethodFutureIncomingResponseSubscribe(p0 : Int) -> Int = "wasi:http/types@0.2.0" "[method]future-incoming-response.subscribe"

///|
fn wasmImportMethodFutureIncomingResponseGet(p0 : Int, p1 : Int) = "wasi:http/types@0.2.0" "[method]future-incoming-response.get"
