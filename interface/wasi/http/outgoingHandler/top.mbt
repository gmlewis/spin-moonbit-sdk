// Generated by `wit-bindgen` 0.41.0. DO NOT EDIT!

///| This function is invoked with an outgoing HTTP Request, and it returns
/// a resource `future-incoming-response` which represents an HTTP Response
/// which may arrive in the future.
///
/// The `options` argument accepts optional parameters for the HTTP
/// protocol's transport layer.
///
/// This function may return an error if the `outgoing-request` is invalid
/// or not allowed to be made. Otherwise, protocol errors are reported
/// through the `future-incoming-response`.
pub fn handle(
  request : @types.OutgoingRequest,
  options : @types.RequestOptions?,
) -> Result[@types.FutureIncomingResponse, @types.ErrorCode] {
  let @types.OutgoingRequest(handle) = request
  let (lowered, lowered4) = match options {
    None => (0, 0)
    Some(payload2) => {
      let @types.RequestOptions(handle3) = payload2
      (1, handle3)
    }
  }
  let return_area = @ffi.malloc(40)
  wasmImportHandle(handle, lowered, lowered4, return_area)
  let lifted205 = match @ffi.load8_u(return_area + 0) {
    0 =>
      Result::Ok(
        @types.FutureIncomingResponse::FutureIncomingResponse(
          @ffi.load32(return_area + 8),
        ),
      )
    1 => {
      let lifted204 = match @ffi.load8_u(return_area + 8) {
        0 => @types.ErrorCode::DnsTimeout
        1 => {
          let lifted : String? = match @ffi.load8_u(return_area + 16) {
            0 => Option::None
            1 => {
              let result = @ffi.ptr2str(
                @ffi.load32(return_area + 20),
                @ffi.load32(return_area + 24),
              )
              Option::Some(result)
            }
            _ => panic()
          }
          let lifted21 : UInt? = match @ffi.load8_u(return_area + 28) {
            0 => Option::None
            1 =>
              Option::Some(
                @ffi.load16_u(return_area + 30)
                .land(0xFFFF)
                .reinterpret_as_uint(),
              )
            _ => panic()
          }
          @types.ErrorCode::DnsError(@types.DnsErrorPayload::{
            rcode: lifted,
            info_code: lifted21,
          })
        }
        2 => @types.ErrorCode::DestinationNotFound
        3 => @types.ErrorCode::DestinationUnavailable
        4 => @types.ErrorCode::DestinationIpProhibited
        5 => @types.ErrorCode::DestinationIpUnroutable
        6 => @types.ErrorCode::ConnectionRefused
        7 => @types.ErrorCode::ConnectionTerminated
        8 => @types.ErrorCode::ConnectionTimeout
        9 => @types.ErrorCode::ConnectionReadTimeout
        10 => @types.ErrorCode::ConnectionWriteTimeout
        11 => @types.ErrorCode::ConnectionLimitReached
        12 => @types.ErrorCode::TlsProtocolError
        13 => @types.ErrorCode::TlsCertificateError
        14 => {
          let lifted52 : Byte? = match @ffi.load8_u(return_area + 16) {
            0 => Option::None
            1 => Option::Some(@ffi.load8_u(return_area + 17).to_byte())
            _ => panic()
          }
          let lifted58 : String? = match @ffi.load8_u(return_area + 20) {
            0 => Option::None
            1 => {
              let result57 = @ffi.ptr2str(
                @ffi.load32(return_area + 24),
                @ffi.load32(return_area + 28),
              )
              Option::Some(result57)
            }
            _ => panic()
          }
          @types.ErrorCode::TlsAlertReceived(@types.TlsAlertReceivedPayload::{
            alert_id: lifted52,
            alert_message: lifted58,
          })
        }
        15 => @types.ErrorCode::HttpRequestDenied
        16 => @types.ErrorCode::HttpRequestLengthRequired
        17 => {
          let lifted69 : UInt64? = match @ffi.load8_u(return_area + 16) {
            0 => Option::None
            1 =>
              Option::Some(
                @ffi.load64(return_area + 24).reinterpret_as_uint64(),
              )
            _ => panic()
          }
          @types.ErrorCode::HttpRequestBodySize(lifted69)
        }
        18 => @types.ErrorCode::HttpRequestMethodInvalid
        19 => @types.ErrorCode::HttpRequestUriInvalid
        20 => @types.ErrorCode::HttpRequestUriTooLong
        21 => {
          let lifted82 : UInt? = match @ffi.load8_u(return_area + 16) {
            0 => Option::None
            1 =>
              Option::Some(@ffi.load32(return_area + 20).reinterpret_as_uint())
            _ => panic()
          }
          @types.ErrorCode::HttpRequestHeaderSectionSize(lifted82)
        }
        22 => {
          let lifted100 : @types.FieldSizePayload? = match
            @ffi.load8_u(return_area + 16) {
            0 => Option::None
            1 => {
              let lifted94 : String? = match @ffi.load8_u(return_area + 20) {
                0 => Option::None
                1 => {
                  let result93 = @ffi.ptr2str(
                    @ffi.load32(return_area + 24),
                    @ffi.load32(return_area + 28),
                  )
                  Option::Some(result93)
                }
                _ => panic()
              }
              let lifted99 : UInt? = match @ffi.load8_u(return_area + 32) {
                0 => Option::None
                1 =>
                  Option::Some(
                    @ffi.load32(return_area + 36).reinterpret_as_uint(),
                  )
                _ => panic()
              }
              Option::Some(@types.FieldSizePayload::{
                field_name: lifted94,
                field_size: lifted99,
              })
            }
            _ => panic()
          }
          @types.ErrorCode::HttpRequestHeaderSize(lifted100)
        }
        23 => {
          let lifted107 : UInt? = match @ffi.load8_u(return_area + 16) {
            0 => Option::None
            1 =>
              Option::Some(@ffi.load32(return_area + 20).reinterpret_as_uint())
            _ => panic()
          }
          @types.ErrorCode::HttpRequestTrailerSectionSize(lifted107)
        }
        24 => {
          let lifted115 : String? = match @ffi.load8_u(return_area + 16) {
            0 => Option::None
            1 => {
              let result114 = @ffi.ptr2str(
                @ffi.load32(return_area + 20),
                @ffi.load32(return_area + 24),
              )
              Option::Some(result114)
            }
            _ => panic()
          }
          let lifted120 : UInt? = match @ffi.load8_u(return_area + 28) {
            0 => Option::None
            1 =>
              Option::Some(@ffi.load32(return_area + 32).reinterpret_as_uint())
            _ => panic()
          }
          @types.ErrorCode::HttpRequestTrailerSize(@types.FieldSizePayload::{
            field_name: lifted115,
            field_size: lifted120,
          })
        }
        25 => @types.ErrorCode::HttpResponseIncomplete
        26 => {
          let lifted129 : UInt? = match @ffi.load8_u(return_area + 16) {
            0 => Option::None
            1 =>
              Option::Some(@ffi.load32(return_area + 20).reinterpret_as_uint())
            _ => panic()
          }
          @types.ErrorCode::HttpResponseHeaderSectionSize(lifted129)
        }
        27 => {
          let lifted137 : String? = match @ffi.load8_u(return_area + 16) {
            0 => Option::None
            1 => {
              let result136 = @ffi.ptr2str(
                @ffi.load32(return_area + 20),
                @ffi.load32(return_area + 24),
              )
              Option::Some(result136)
            }
            _ => panic()
          }
          let lifted142 : UInt? = match @ffi.load8_u(return_area + 28) {
            0 => Option::None
            1 =>
              Option::Some(@ffi.load32(return_area + 32).reinterpret_as_uint())
            _ => panic()
          }
          @types.ErrorCode::HttpResponseHeaderSize(@types.FieldSizePayload::{
            field_name: lifted137,
            field_size: lifted142,
          })
        }
        28 => {
          let lifted149 : UInt64? = match @ffi.load8_u(return_area + 16) {
            0 => Option::None
            1 =>
              Option::Some(
                @ffi.load64(return_area + 24).reinterpret_as_uint64(),
              )
            _ => panic()
          }
          @types.ErrorCode::HttpResponseBodySize(lifted149)
        }
        29 => {
          let lifted156 : UInt? = match @ffi.load8_u(return_area + 16) {
            0 => Option::None
            1 =>
              Option::Some(@ffi.load32(return_area + 20).reinterpret_as_uint())
            _ => panic()
          }
          @types.ErrorCode::HttpResponseTrailerSectionSize(lifted156)
        }
        30 => {
          let lifted164 : String? = match @ffi.load8_u(return_area + 16) {
            0 => Option::None
            1 => {
              let result163 = @ffi.ptr2str(
                @ffi.load32(return_area + 20),
                @ffi.load32(return_area + 24),
              )
              Option::Some(result163)
            }
            _ => panic()
          }
          let lifted169 : UInt? = match @ffi.load8_u(return_area + 28) {
            0 => Option::None
            1 =>
              Option::Some(@ffi.load32(return_area + 32).reinterpret_as_uint())
            _ => panic()
          }
          @types.ErrorCode::HttpResponseTrailerSize(@types.FieldSizePayload::{
            field_name: lifted164,
            field_size: lifted169,
          })
        }
        31 => {
          let lifted177 : String? = match @ffi.load8_u(return_area + 16) {
            0 => Option::None
            1 => {
              let result176 = @ffi.ptr2str(
                @ffi.load32(return_area + 20),
                @ffi.load32(return_area + 24),
              )
              Option::Some(result176)
            }
            _ => panic()
          }
          @types.ErrorCode::HttpResponseTransferCoding(lifted177)
        }
        32 => {
          let lifted185 : String? = match @ffi.load8_u(return_area + 16) {
            0 => Option::None
            1 => {
              let result184 = @ffi.ptr2str(
                @ffi.load32(return_area + 20),
                @ffi.load32(return_area + 24),
              )
              Option::Some(result184)
            }
            _ => panic()
          }
          @types.ErrorCode::HttpResponseContentCoding(lifted185)
        }
        33 => @types.ErrorCode::HttpResponseTimeout
        34 => @types.ErrorCode::HttpUpgradeFailed
        35 => @types.ErrorCode::HttpProtocolError
        36 => @types.ErrorCode::LoopDetected
        37 => @types.ErrorCode::ConfigurationError
        38 => {
          let lifted203 : String? = match @ffi.load8_u(return_area + 16) {
            0 => Option::None
            1 => {
              let result202 = @ffi.ptr2str(
                @ffi.load32(return_area + 20),
                @ffi.load32(return_area + 24),
              )
              Option::Some(result202)
            }
            _ => panic()
          }
          @types.ErrorCode::InternalError(lifted203)
        }
        _ => panic()
      }
      Result::Err(lifted204)
    }
    _ => panic()
  }
  @ffi.free(return_area)
  return lifted205
}
