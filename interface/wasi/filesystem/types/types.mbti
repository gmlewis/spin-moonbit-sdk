package "gmlewis/spin-moonbit-sdk/interface/wasi/filesystem/types"

import(
  "gmlewis/spin-moonbit-sdk/interface/wasi/clocks/wallClock"
  "gmlewis/spin-moonbit-sdk/interface/wasi/io/error"
  "gmlewis/spin-moonbit-sdk/interface/wasi/io/streams"
)

// Values
fn filesystem_error_code(@error.Error_) -> ErrorCode?

// Types and methods
pub(all) enum Advice {
  NORMAL
  SEQUENTIAL
  RANDOM
  WILL_NEED
  DONT_NEED
  NO_REUSE
}
impl Advice {
  from(Int) -> Self
  ordinal(Self) -> Int
}
impl Eq for Advice
impl Show for Advice

pub(all) type Descriptor Int
impl Descriptor {
  advise(Self, UInt64, UInt64, Advice) -> Result[Unit, ErrorCode]
  append_via_stream(Self) -> Result[@streams.OutputStream, ErrorCode]
  create_directory_at(Self, String) -> Result[Unit, ErrorCode]
  drop(Self) -> Unit
  get_flags(Self) -> Result[DescriptorFlags, ErrorCode]
  get_type(Self) -> Result[DescriptorType, ErrorCode]
  is_same_object(Self, Self) -> Bool
  link_at(Self, PathFlags, String, Self, String) -> Result[Unit, ErrorCode]
  metadata_hash(Self) -> Result[MetadataHashValue, ErrorCode]
  metadata_hash_at(Self, PathFlags, String) -> Result[MetadataHashValue, ErrorCode]
  open_at(Self, PathFlags, String, OpenFlags, DescriptorFlags) -> Result[Self, ErrorCode]
  read(Self, UInt64, UInt64) -> Result[(FixedArray[Byte], Bool), ErrorCode]
  read_directory(Self) -> Result[DirectoryEntryStream, ErrorCode]
  read_via_stream(Self, UInt64) -> Result[@streams.InputStream, ErrorCode]
  readlink_at(Self, String) -> Result[String, ErrorCode]
  remove_directory_at(Self, String) -> Result[Unit, ErrorCode]
  rename_at(Self, String, Self, String) -> Result[Unit, ErrorCode]
  set_size(Self, UInt64) -> Result[Unit, ErrorCode]
  set_times(Self, NewTimestamp, NewTimestamp) -> Result[Unit, ErrorCode]
  set_times_at(Self, PathFlags, String, NewTimestamp, NewTimestamp) -> Result[Unit, ErrorCode]
  stat(Self) -> Result[DescriptorStat, ErrorCode]
  stat_at(Self, PathFlags, String) -> Result[DescriptorStat, ErrorCode]
  symlink_at(Self, String, String) -> Result[Unit, ErrorCode]
  sync(Self) -> Result[Unit, ErrorCode]
  sync_data(Self) -> Result[Unit, ErrorCode]
  unlink_file_at(Self, String) -> Result[Unit, ErrorCode]
  write(Self, FixedArray[Byte], UInt64) -> Result[UInt64, ErrorCode]
  write_via_stream(Self, UInt64) -> Result[@streams.OutputStream, ErrorCode]
}
impl Eq for Descriptor
impl Show for Descriptor

pub(all) type DescriptorFlags Byte
impl DescriptorFlags {
  default() -> Self
  is_set(Self, DescriptorFlagsFlag) -> Bool
  set(Self, DescriptorFlagsFlag) -> Self
  unset(Self, DescriptorFlagsFlag) -> Self
}
impl Eq for DescriptorFlags
impl Show for DescriptorFlags

pub(all) enum DescriptorFlagsFlag {
  READ
  WRITE
  FILE_INTEGRITY_SYNC
  DATA_INTEGRITY_SYNC
  REQUESTED_WRITE_SYNC
  MUTATE_DIRECTORY
}

pub(all) struct DescriptorStat {
  type_ : DescriptorType
  link_count : UInt64
  size : UInt64
  data_access_timestamp : @wallClock.Datetime?
  data_modification_timestamp : @wallClock.Datetime?
  status_change_timestamp : @wallClock.Datetime?
}
impl Eq for DescriptorStat
impl Show for DescriptorStat

pub(all) enum DescriptorType {
  UNKNOWN
  BLOCK_DEVICE
  CHARACTER_DEVICE
  DIRECTORY
  FIFO
  SYMBOLIC_LINK
  REGULAR_FILE
  SOCKET
}
impl DescriptorType {
  from(Int) -> Self
  ordinal(Self) -> Int
}
impl Eq for DescriptorType
impl Show for DescriptorType

pub(all) struct DirectoryEntry {
  type_ : DescriptorType
  name : String
}
impl Eq for DirectoryEntry
impl Show for DirectoryEntry

pub(all) type DirectoryEntryStream Int
impl DirectoryEntryStream {
  drop(Self) -> Unit
  read_directory_entry(Self) -> Result[DirectoryEntry?, ErrorCode]
}
impl Eq for DirectoryEntryStream
impl Show for DirectoryEntryStream

pub(all) enum ErrorCode {
  ACCESS
  WOULD_BLOCK
  ALREADY
  BAD_DESCRIPTOR
  BUSY
  DEADLOCK
  QUOTA
  EXIST
  FILE_TOO_LARGE
  ILLEGAL_BYTE_SEQUENCE
  IN_PROGRESS
  INTERRUPTED
  INVALID
  IO
  IS_DIRECTORY
  LOOP
  TOO_MANY_LINKS
  MESSAGE_SIZE
  NAME_TOO_LONG
  NO_DEVICE
  NO_ENTRY
  NO_LOCK
  INSUFFICIENT_MEMORY
  INSUFFICIENT_SPACE
  NOT_DIRECTORY
  NOT_EMPTY
  NOT_RECOVERABLE
  UNSUPPORTED
  NO_TTY
  NO_SUCH_DEVICE
  OVERFLOW
  NOT_PERMITTED
  PIPE
  READ_ONLY
  INVALID_SEEK
  TEXT_FILE_BUSY
  CROSS_DEVICE
}
impl ErrorCode {
  from(Int) -> Self
  ordinal(Self) -> Int
}
impl Eq for ErrorCode
impl Show for ErrorCode

pub(all) struct MetadataHashValue {
  lower : UInt64
  upper : UInt64
}
impl Eq for MetadataHashValue
impl Show for MetadataHashValue

pub(all) enum NewTimestamp {
  NoChange
  Now
  Timestamp(@wallClock.Datetime)
}
impl Eq for NewTimestamp
impl Show for NewTimestamp

pub(all) type OpenFlags Byte
impl OpenFlags {
  default() -> Self
  is_set(Self, OpenFlagsFlag) -> Bool
  set(Self, OpenFlagsFlag) -> Self
  unset(Self, OpenFlagsFlag) -> Self
}
impl Eq for OpenFlags
impl Show for OpenFlags

pub(all) enum OpenFlagsFlag {
  CREATE
  DIRECTORY
  EXCLUSIVE
  TRUNCATE
}

pub(all) type PathFlags Byte
impl PathFlags {
  default() -> Self
  is_set(Self, PathFlagsFlag) -> Bool
  set(Self, PathFlagsFlag) -> Self
  unset(Self, PathFlagsFlag) -> Self
}
impl Eq for PathFlags
impl Show for PathFlags

pub(all) enum PathFlagsFlag {
  SYMLINK_FOLLOW
}

// Type aliases

// Traits

