package "gmlewis/spin-moonbit-sdk/interface/wasi/sockets/network"

// Values

// Types and methods
pub(all) enum ErrorCode {
  UNKNOWN
  ACCESS_DENIED
  NOT_SUPPORTED
  INVALID_ARGUMENT
  OUT_OF_MEMORY
  TIMEOUT
  CONCURRENCY_CONFLICT
  NOT_IN_PROGRESS
  WOULD_BLOCK
  INVALID_STATE
  NEW_SOCKET_LIMIT
  ADDRESS_NOT_BINDABLE
  ADDRESS_IN_USE
  REMOTE_UNREACHABLE
  CONNECTION_REFUSED
  CONNECTION_RESET
  CONNECTION_ABORTED
  DATAGRAM_TOO_LARGE
  NAME_UNRESOLVABLE
  TEMPORARY_RESOLVER_FAILURE
  PERMANENT_RESOLVER_FAILURE
}
impl ErrorCode {
  from(Int) -> Self
  ordinal(Self) -> Int
}
impl Eq for ErrorCode
impl Show for ErrorCode

pub(all) enum IpAddress {
  Ipv4((Byte, Byte, Byte, Byte))
  Ipv6((UInt, UInt, UInt, UInt, UInt, UInt, UInt, UInt))
}
impl Eq for IpAddress
impl Show for IpAddress

pub(all) enum IpAddressFamily {
  IPV4
  IPV6
}
impl IpAddressFamily {
  from(Int) -> Self
  ordinal(Self) -> Int
}
impl Eq for IpAddressFamily
impl Show for IpAddressFamily

pub(all) enum IpSocketAddress {
  Ipv4(Ipv4SocketAddress)
  Ipv6(Ipv6SocketAddress)
}
impl Eq for IpSocketAddress
impl Show for IpSocketAddress

pub(all) struct Ipv4SocketAddress {
  port : UInt
  address : (Byte, Byte, Byte, Byte)
}
impl Eq for Ipv4SocketAddress
impl Show for Ipv4SocketAddress

pub(all) struct Ipv6SocketAddress {
  port : UInt
  flow_info : UInt
  address : (UInt, UInt, UInt, UInt, UInt, UInt, UInt, UInt)
  scope_id : UInt
}
impl Eq for Ipv6SocketAddress
impl Show for Ipv6SocketAddress

pub(all) type Network Int
impl Network {
  drop(Self) -> Unit
}
impl Eq for Network
impl Show for Network

// Type aliases

// Traits

