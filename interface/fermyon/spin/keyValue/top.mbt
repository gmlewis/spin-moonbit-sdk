// Generated by `wit-bindgen` 0.41.0. DO NOT EDIT!
///| An open key-value store
pub(all) type Store Int derive(Show, Eq)

///| Drops a resource handle.
pub fn Store::drop(self : Store) -> Unit {
  let Store(resource) = self
  wasmImportResourceDropStore(resource)
}

///| The set of errors which may be raised by functions in this interface
pub(all) enum Error_ {
  StoreTableFull
  NoSuchStore
  AccessDenied
  Other(String)
} derive(Show, Eq)

///| Open the store with the specified label.
///
/// `label` must refer to a store allowed in the spin.toml manifest.
///
/// `error::no-such-store` will be raised if the `label` is not recognized.
pub fn Store::open(label : String) -> Result[Store, Error_] {
  let return_area = @ffi.malloc(16)
  wasmImportStaticStoreOpen(@ffi.str2ptr(label), label.length(), return_area)
  let lifted10 = match @ffi.load8_u(return_area + 0) {
    0 => Result::Ok(Store::Store(@ffi.load32(return_area + 4)))
    1 => {
      let lifted = match @ffi.load8_u(return_area + 4) {
        0 => Error_::StoreTableFull
        1 => Error_::NoSuchStore
        2 => Error_::AccessDenied
        3 => {
          let result = @ffi.ptr2str(
            @ffi.load32(return_area + 8),
            @ffi.load32(return_area + 12),
          )
          Error_::Other(result)
        }
        _ => panic()
      }
      Result::Err(lifted)
    }
    _ => panic()
  }
  ignore(label)
  @ffi.free(return_area)
  return lifted10
}

///| Get the value associated with the specified `key`
///
/// Returns `ok(none)` if the key does not exist.
pub fn Store::get(
  self : Store,
  key : String,
) -> Result[FixedArray[Byte]?, Error_] {
  let Store(handle) = self
  let return_area = @ffi.malloc(16)
  wasmImportMethodStoreGet(handle, @ffi.str2ptr(key), key.length(), return_area)
  let lifted16 = match @ffi.load8_u(return_area + 0) {
    0 => {
      let lifted : FixedArray[Byte]? = match @ffi.load8_u(return_area + 4) {
        0 => Option::None
        1 => {
          let result = @ffi.ptr2bytes(
            @ffi.load32(return_area + 8),
            @ffi.load32(return_area + 12),
          )
          Option::Some(result)
        }
        _ => panic()
      }
      Result::Ok(lifted)
    }
    1 => {
      let lifted15 = match @ffi.load8_u(return_area + 4) {
        0 => Error_::StoreTableFull
        1 => Error_::NoSuchStore
        2 => Error_::AccessDenied
        3 => {
          let result14 = @ffi.ptr2str(
            @ffi.load32(return_area + 8),
            @ffi.load32(return_area + 12),
          )
          Error_::Other(result14)
        }
        _ => panic()
      }
      Result::Err(lifted15)
    }
    _ => panic()
  }
  ignore(key)
  @ffi.free(return_area)
  return lifted16
}

///| Set the `value` associated with the specified `key` overwriting any existing value.
pub fn Store::set(
  self : Store,
  key : String,
  value : FixedArray[Byte],
) -> Result[Unit, Error_] {
  let Store(handle) = self
  let return_area = @ffi.malloc(16)
  wasmImportMethodStoreSet(
    handle,
    @ffi.str2ptr(key),
    key.length(),
    @ffi.bytes2ptr(value),
    value.length(),
    return_area,
  )
  let lifted10 = match @ffi.load8_u(return_area + 0) {
    0 => Result::Ok(())
    1 => {
      let lifted = match @ffi.load8_u(return_area + 4) {
        0 => Error_::StoreTableFull
        1 => Error_::NoSuchStore
        2 => Error_::AccessDenied
        3 => {
          let result = @ffi.ptr2str(
            @ffi.load32(return_area + 8),
            @ffi.load32(return_area + 12),
          )
          Error_::Other(result)
        }
        _ => panic()
      }
      Result::Err(lifted)
    }
    _ => panic()
  }
  ignore(key)
  ignore(value)
  @ffi.free(return_area)
  return lifted10
}

///| Delete the tuple with the specified `key`
///
/// No error is raised if a tuple did not previously exist for `key`.
pub fn Store::delete(self : Store, key : String) -> Result[Unit, Error_] {
  let Store(handle) = self
  let return_area = @ffi.malloc(16)
  wasmImportMethodStoreDelete(
    handle,
    @ffi.str2ptr(key),
    key.length(),
    return_area,
  )
  let lifted10 = match @ffi.load8_u(return_area + 0) {
    0 => Result::Ok(())
    1 => {
      let lifted = match @ffi.load8_u(return_area + 4) {
        0 => Error_::StoreTableFull
        1 => Error_::NoSuchStore
        2 => Error_::AccessDenied
        3 => {
          let result = @ffi.ptr2str(
            @ffi.load32(return_area + 8),
            @ffi.load32(return_area + 12),
          )
          Error_::Other(result)
        }
        _ => panic()
      }
      Result::Err(lifted)
    }
    _ => panic()
  }
  ignore(key)
  @ffi.free(return_area)
  return lifted10
}

///| Return whether a tuple exists for the specified `key`
pub fn Store::exists(self : Store, key : String) -> Result[Bool, Error_] {
  let Store(handle) = self
  let return_area = @ffi.malloc(16)
  wasmImportMethodStoreExists(
    handle,
    @ffi.str2ptr(key),
    key.length(),
    return_area,
  )
  let lifted10 = match @ffi.load8_u(return_area + 0) {
    0 => Result::Ok(@ffi.load8_u(return_area + 4) != 0)
    1 => {
      let lifted = match @ffi.load8_u(return_area + 4) {
        0 => Error_::StoreTableFull
        1 => Error_::NoSuchStore
        2 => Error_::AccessDenied
        3 => {
          let result = @ffi.ptr2str(
            @ffi.load32(return_area + 8),
            @ffi.load32(return_area + 12),
          )
          Error_::Other(result)
        }
        _ => panic()
      }
      Result::Err(lifted)
    }
    _ => panic()
  }
  ignore(key)
  @ffi.free(return_area)
  return lifted10
}

///| Return a list of all the keys
pub fn Store::get_keys(self : Store) -> Result[Array[String], Error_] {
  let Store(handle) = self
  let return_area = @ffi.malloc(16)
  wasmImportMethodStoreGetKeys(handle, return_area)
  let lifted13 = match @ffi.load8_u(return_area + 0) {
    0 => {
      let array : Array[String] = []
      for index = 0; index < @ffi.load32(return_area + 8); index = index + 1 {
        let base1 = @ffi.load32(return_area + 4) + index * 8
        let result = @ffi.ptr2str(
          @ffi.load32(base1 + 0),
          @ffi.load32(base1 + 4),
        )
        array.push(result)
      }
      @ffi.free(@ffi.load32(return_area + 4))
      Result::Ok(array)
    }
    1 => {
      let lifted = match @ffi.load8_u(return_area + 4) {
        0 => Error_::StoreTableFull
        1 => Error_::NoSuchStore
        2 => Error_::AccessDenied
        3 => {
          let result12 = @ffi.ptr2str(
            @ffi.load32(return_area + 8),
            @ffi.load32(return_area + 12),
          )
          Error_::Other(result12)
        }
        _ => panic()
      }
      Result::Err(lifted)
    }
    _ => panic()
  }
  @ffi.free(return_area)
  return lifted13
}
