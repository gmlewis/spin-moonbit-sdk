// Generated by `wit-bindgen` 0.41.0. DO NOT EDIT!

///| Errors related to interacting with a database.
pub(all) enum Error_ {
  ConnectionFailed(String)
  BadParameter(String)
  QueryFailed(String)
  ValueConversionFailed(String)
  Other(String)
} derive(Show, Eq)

///| Data types for a database column
pub(all) enum DbDataType {
  BOOLEAN
  INT8
  INT16
  INT32
  INT64
  UINT8
  UINT16
  UINT32
  UINT64
  FLOATING32
  FLOATING64
  STR
  BINARY
  OTHER
} derive(Show, Eq)

///|
pub fn DbDataType::ordinal(self : DbDataType) -> Int {
  match self {
    BOOLEAN => 0
    INT8 => 1
    INT16 => 2
    INT32 => 3
    INT64 => 4
    UINT8 => 5
    UINT16 => 6
    UINT32 => 7
    UINT64 => 8
    FLOATING32 => 9
    FLOATING64 => 10
    STR => 11
    BINARY => 12
    OTHER => 13
  }
}

///|
pub fn DbDataType::from(self : Int) -> DbDataType {
  match self {
    0 => BOOLEAN
    1 => INT8
    2 => INT16
    3 => INT32
    4 => INT64
    5 => UINT8
    6 => UINT16
    7 => UINT32
    8 => UINT64
    9 => FLOATING32
    10 => FLOATING64
    11 => STR
    12 => BINARY
    13 => OTHER
    _ => panic()
  }
}

///| Database values
pub(all) enum DbValue {
  Boolean(Bool)
  Int8(Int)
  Int16(Int)
  Int32(Int)
  Int64(Int64)
  Uint8(Byte)
  Uint16(UInt)
  Uint32(UInt)
  Uint64(UInt64)
  Floating32(Float)
  Floating64(Double)
  Str(String)
  Binary(FixedArray[Byte])
  DbNull
  Unsupported
} derive(Show, Eq)

///| Values used in parameterized queries
pub(all) enum ParameterValue {
  Boolean(Bool)
  Int8(Int)
  Int16(Int)
  Int32(Int)
  Int64(Int64)
  Uint8(Byte)
  Uint16(UInt)
  Uint32(UInt)
  Uint64(UInt64)
  Floating32(Float)
  Floating64(Double)
  Str(String)
  Binary(FixedArray[Byte])
  DbNull
} derive(Show, Eq)

///| A database column
pub(all) struct Column {
  name : String
  data_type : DbDataType
} derive(Show, Eq)

///| A set of database rows
pub(all) struct RowSet {
  columns : Array[Column]
  rows : Array[Array[DbValue]]
} derive(Show, Eq)
